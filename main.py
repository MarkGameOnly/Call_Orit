# === –ò–º–ø–æ—Ä—Ç—ã ===
import os
import logging
import asyncio
import sqlite3
import time
from dotenv import load_dotenv
from datetime import datetime, timedelta

from fastapi import FastAPI, Request, UploadFile
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup, BotCommand
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.filters import Command
from openai import AsyncOpenAI

from io import BytesIO
import base64

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_ID = int(os.getenv("ADMIN_ID", "1082828397")) # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
CHANNEL_ID = os.getenv("CHANNEL_ID") # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, -1001234567890)

# –£–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∞–ø–∫–∞ 'img' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–º –∂–µ –∫–∞—Ç–∞–ª–æ–≥–µ, —á—Ç–æ –∏ main.py
IMG_DIR = "img" 

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not BOT_TOKEN:
    logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ BOT_TOKEN.")
if not OPENAI_API_KEY:
    logger.error("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY.")
if not CHANNEL_ID:
    logger.warning("CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CHANNEL_ID –≤ None, –µ—Å–ª–∏ –æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    CHANNEL_ID = None 

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
session = AiohttpSession()
bot = Bot(token=BOT_TOKEN, session=session)
dp = Dispatcher(storage=MemoryStorage())
app = FastAPI()
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite. check_same_thread=False –Ω—É–∂–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FastAPI.
conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()
FREE_USES_LIMIT = 10 # –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–≤–∞—è —Ç–∞–±–ª–∏—Ü—É users, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    try:
        cursor.execute(f"""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                uses_left INTEGER DEFAULT {FREE_USES_LIMIT},
                last_active TEXT DEFAULT CURRENT_TIMESTAMP
            )
        """)
        conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

async def setup_bot_commands():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –º–µ–Ω—é Telegram."""
    try:
        await bot.set_my_commands([
            BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand(command="menu", description="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"),
            BotCommand(command="profile", description="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"),
            BotCommand(command="buy", description="–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
            BotCommand(command="admin", description="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"),
            BotCommand(command="broadcast", description="–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
            BotCommand(command="iqtest", description="–ü—Ä–æ–π—Ç–∏ IQ –¢–µ—Å—Ç") # –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
        ])
        logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}")

# === –°–æ—Å—Ç–æ—è–Ω–∏—è FSM (Finite State Machine) ===
# –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–º –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
class GenStates(StatesGroup):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM."""
    await_photo = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await_broadcast = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
def main_menu():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç ReplyKeyboardMarkup –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –±–æ—Ç–∞."""
    kb = [
        [KeyboardButton(text="üç± –£–∑–Ω–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏ –ø–æ —Ñ–æ—Ç–æ")],
        [KeyboardButton(text="üì∏ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ"), KeyboardButton(text="üèãÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")],
        [KeyboardButton(text="üìö –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?"), KeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏")],
        [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üß† IQ –¢–µ—Å—Ç")] # –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

# === –•–µ–ª–ø–µ—Ä—ã (–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏) ===
def ensure_user(user_id: int):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –ª–∏–º–∏—Ç–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π.
    –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    now = datetime.utcnow().isoformat()
    try:
        cursor.execute("""
            INSERT INTO users (user_id, last_active)
            VALUES (?, ?)
            ON CONFLICT(user_id) DO UPDATE SET last_active=excluded.last_active
        """, (user_id, now))
        conn.commit()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–≤–µ—Ä–µ–Ω/–¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î.")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/–¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

def get_user_stats():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    try:
        cursor.execute("SELECT COUNT(*), SUM(uses_left) FROM users")
        total_users, total_uses = cursor.fetchone()
        cursor.execute("SELECT COUNT(*) FROM users WHERE uses_left < ?", (FREE_USES_LIMIT,))
        paid_users = cursor.fetchone()[0]
        return total_users, total_uses, paid_users
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return 0, 0, 0

def get_generation_count():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–æ—Ç–∞ (—Ç.–µ. –∏—Ö uses_left —É–º–µ–Ω—å—à–∏–ª—Å—è)."""
    try:
        cursor.execute("SELECT COUNT(*) FROM users WHERE uses_left < ?", (FREE_USES_LIMIT,))
        return cursor.fetchone()[0]
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {e}")
        return 0

async def send_photo_or_text(chat_id: int, img_path: str, caption: str, parse_mode: str = None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é. –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.
    """
    full_img_path = os.path.join(IMG_DIR, img_path)
    if os.path.exists(full_img_path):
        try:
            await bot.send_photo(chat_id=chat_id, photo=types.FSInputFile(full_img_path), caption=caption, parse_mode=parse_mode)
            logger.info(f"–§–æ—Ç–æ {img_path} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ {img_path} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
            await bot.send_message(chat_id=chat_id, text=f"üñºÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. {caption}", parse_mode=parse_mode)
    else:
        logger.warning(f"–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {full_img_path}. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.")
        await bot.send_message(chat_id=chat_id, text=f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. {caption}", parse_mode=parse_mode)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===

@dp.message(Command("stats"))
async def cmd_stats(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if message.from_user.id != ADMIN_ID:
        return await message.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    total, _, paid = get_user_stats()
    active = get_generation_count()

    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n"
        f"üí∏ –° –ø–æ–¥–ø–∏—Å–∫–æ–π: {paid}\n"
        f"üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {active}"
    )
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")

@dp.message(Command("users"))
async def cmd_list_users(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /users –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)."""
    if message.from_user.id != ADMIN_ID:
        return await message.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    
    try:
        cursor.execute("SELECT user_id, uses_left, last_active FROM users ORDER BY last_active DESC LIMIT 20")
        rows = cursor.fetchall()
        if not rows:
            return await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.")
        
        text = "üßæ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
        for uid, uses, last in rows:
            text += f"üÜî {uid} ‚Äî –û—Å—Ç–∞–ª–æ—Å—å: {uses} ‚Äî –ê–∫—Ç–∏–≤–µ–Ω: {last}\n"
        
        await message.answer(text)
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@dp.message(Command("broadcast"))
async def cmd_broadcast(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /broadcast –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É)."""
    if message.from_user.id != ADMIN_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(GenStates.await_broadcast)
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É.")

@dp.message(GenStates.await_broadcast)
async def process_broadcast(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    text = message.text
    if not text:
        await message.answer("‚ö†Ô∏è –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    try:
        cursor.execute("SELECT user_id FROM users")
        users = cursor.fetchall()
        success, failed = 0, 0
        for user in users:
            try:
                await bot.send_message(chat_id=user[0], text=text)
                success += 1
                await asyncio.sleep(0.05) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ñ–ª—É–¥–∞
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")
                failed += 1
        
        if CHANNEL_ID:
            try:
                await bot.send_message(chat_id=CHANNEL_ID, text=f"üì¢ –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞: {text}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞—Å—Å—ã–ª–∫–µ –≤ –∫–∞–Ω–∞–ª {CHANNEL_ID}: {e}")

        await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n–û—à–∏–±–æ–∫: {failed}")
        logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}, –û—à–∏–±–æ–∫: {failed}.")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.")
    finally:
        await state.clear()

@dp.message(Command("find"))
async def cmd_find_user(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /find –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID)."""
    if message.from_user.id != ADMIN_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    parts = message.text.strip().split()
    if len(parts) != 2:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /find ID")
        return
    try:
        target_id = int(parts[1])
        cursor.execute("SELECT uses_left FROM users WHERE user_id = ?", (target_id,))
        row = cursor.fetchone()
        if row:
            await message.answer(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–∞–π–¥–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {row[0]}")
            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –Ω–∞—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}.")
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –Ω–µ –Ω–∞—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}.")
    except ValueError:
        await message.answer("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        logger.warning(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID: {parts[1]}.")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

@dp.message(F.text.in_(["/start", "/menu"]))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /menu."""
    ensure_user(message.from_user.id)
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –≤ –º–µ–Ω—é
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –∏–ª–∏ –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é.")

@dp.message(F.text == "/profile")
@dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def cmd_profile(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile –∏ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ—Ñ–∏–ª—å'."""
    user_id = message.from_user.id
    ensure_user(user_id)
    cursor.execute("SELECT uses_left FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()

    caption = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:\nID: {user_id}\n–û—Å—Ç–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {row[0] if row else 0}"
    await send_photo_or_text(message.chat.id, "profile.png", caption)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Ñ–∏–ª—å.")

@dp.message(F.text == "/admin")
async def cmd_admin(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if message.from_user.id != ADMIN_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    total_users, total_uses, paid_users = get_user_stats()

    await message.answer(
        f"üõ† <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üîÑ –û–±—â–∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –æ—Å—Ç–∞–ª–æ—Å—å: {total_uses or 0}\n"
        f"üí∏ –ö—É–ø–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É: {paid_users}\n\n"
        f"‚úèÔ∏è –ß—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –Ω–∞–ø–∏—à–∏: /activate ID", parse_mode="HTML")
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")

@dp.message(Command("activate"))
async def cmd_activate_user(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /activate –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏)."""
    if message.from_user.id != ADMIN_ID:
        return await message.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    
    parts = message.text.strip().split()
    if len(parts) != 2:
        return await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /activate user_id")

    user_id_str = parts[1]
    try:
        user_id = int(user_id_str)
        cursor.execute("UPDATE users SET uses_left = 999 WHERE user_id = ?", (user_id,))
        conn.commit()
        if cursor.rowcount > 0:
            await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è {user_id}.")
            try:
                await bot.send_message(chat_id=user_id, text="üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø.")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        else:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            logger.warning(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
    except ValueError:
        await message.answer("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        logger.warning(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {user_id_str}.")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.")

@dp.message(F.text == "üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏")
@dp.message(Command("buy"))
async def cmd_buy(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /buy –∏ –∫–Ω–æ–ø–∫–∏ '–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏'."""
    caption = (
        "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ —Å—Ç–æ–∏—Ç $2.5 —á–µ—Ä–µ–∑ CryptoBot:\n\n"
        "<a href='https://t.me/send?start=IVncR7b5DNSe'>üîó –û–ø–ª–∞—Ç–∏—Ç—å</a>\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –≤—Ä—É—á–Ω—É—é.\n"
        "–ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏, —Å–æ–æ–±—â–∏—Ç–µ –≤ <a href='https://t.me/calloritpay'>–∫–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏</a>."
    )
    await send_photo_or_text(message.chat.id, "pay.png", caption, parse_mode="HTML")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ.")

@dp.message(F.text.in_(["üç± –£–∑–Ω–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏ –ø–æ —Ñ–æ—Ç–æ", "üì∏ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ"]))
async def prompt_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ '–£–∑–Ω–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏ –ø–æ —Ñ–æ—Ç–æ' –∏ '–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ'."""
    image_name = "photocall.png" if "–£–∑–Ω–∞—Ç—å" in message.text else "sendphoto.png"
    caption = "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞."
    await send_photo_or_text(message.chat.id, image_name, caption)
    await state.set_state(GenStates.await_photo)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ.")

@dp.message(F.photo, GenStates.await_photo)
async def handle_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –∏ –ë–ñ–£."""
    user_id = message.from_user.id
    ensure_user(user_id)

    cursor.execute("SELECT uses_left FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    uses_left = row[0] if row else 0

    if uses_left <= 0:
        await message.answer("üîê –õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π.")
        await state.clear()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_message = await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ —Ñ–æ—Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        photo = message.photo[-1] # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        file = await bot.get_file(photo.file_id)
        file_path = file.file_path
        file_data = await bot.download_file(file_path)
        image_bytes = file_data.read()

        # –í—ã–∑—ã–≤–∞–µ–º OpenAI API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –ë–ñ–£
        response = await openai_client.chat.completions.create(
            model="gpt-4o", # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å gpt-4o –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            messages=[
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": "–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ? –£–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä–Ω—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –±–ª—é–¥–∞, –∞ —Ç–∞–∫–∂–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤ (–ë–ñ–£) –≤ –≥—Ä–∞–º–º–∞—Ö. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
                        {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{base64.b64encode(image_bytes).decode()}"}}
                    ]
                }
            ],
            max_tokens=500 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
        )
        answer = response.choices[0].message.content

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(f"üìä –û—Ç–≤–µ—Ç:\n{answer}")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç –æ—Ç OpenAI —Å –∫–∞–ª–æ—Ä–∏—è–º–∏ –∏ –ë–ñ–£.")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª (–µ—Å–ª–∏ CHANNEL_ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
        if CHANNEL_ID:
            username_or_id = f"@{message.from_user.username}" if message.from_user.username else f"ID: {user_id}"
            try:
                await bot.send_message(
                    chat_id=CHANNEL_ID,
                    text=f"üì∑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username_or_id} –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–æ—Ç–æ –µ–¥—ã. –ö–∞–ª–æ—Ä–∏–∏ –∏ –ë–ñ–£ –≤—ã—á–∏—Å–ª–µ–Ω—ã."
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ñ–æ—Ç–æ –æ—Ç {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª.")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª {CHANNEL_ID}: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        cursor.execute("UPDATE users SET uses_left = uses_left - 1 WHERE user_id = ?", (user_id,))
        conn.commit()
        logger.info(f"–°—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–º–µ–Ω—å—à–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å: {uses_left - 1}.")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
    finally:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é..."
        try:
            await bot.delete_message(chat_id=processing_message.chat.id, message_id=processing_message.message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
        await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏

@dp.message(F.text == "üìö –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?")
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?'."""
    caption = (
        "‚ÑπÔ∏è <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º</b>\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ \"–£–∑–Ω–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏ –ø–æ —Ñ–æ—Ç–æ\"\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –±–ª—é–¥–∞ –∏ –ë–ñ–£.\n\n"
        "üîÅ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ 10 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π. –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä–æ–µ—Ç –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø."
    )
    await send_photo_or_text(message.chat.id, "help.png", caption, parse_mode="HTML")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å.")

@dp.message(F.text == "üèãÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
async def send_training_programs(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫'."""
    caption = (
        "üèãÔ∏è‚Äç‚ôÄÔ∏è <b>–ü–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:</b>\n\n"
        "- <a href='https://t.me/Itmarket1_bot?start=good_82171'>–ê–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–∏—Ç–∞–Ω–∏—è</a>\n"
        "- <a href='https://t.me/Itmarket1_bot?start=good_82170'>–°–ø–æ—Ä—Ç –±–µ–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (–∫—É—Ä—Å)</a>"
    )
    await send_photo_or_text(message.chat.id, "programm.png", caption, parse_mode="HTML")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")

# === –ù–û–í–´–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ: IQ –¢–ï–°–¢ ===
@dp.message(F.text == "üß† IQ –¢–µ—Å—Ç")
@dp.message(Command("iqtest"))
async def cmd_iq_test(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ 'IQ –¢–µ—Å—Ç' –∏ –∫–æ–º–∞–Ω–¥—ã /iqtest.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Å—Å—ã–ª–∫—É –Ω–∞ IQ-–±–æ—Ç–∞.
    """
    caption = (
        "üß† –ü—Ä–æ–π–¥–∏ –Ω–∞—à IQ-—Ç–µ—Å—Ç –∏ —É–∑–Ω–∞–π —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n\n"
        "<a href='https://t.me/iqmanager1_bot'>üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ IQ-—Ç–µ—Å—Ç—É</a>"
    )
    await send_photo_or_text(message.chat.id, "iq.png", caption, parse_mode="HTML")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª IQ-—Ç–µ—Å—Ç.")

# === –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ webhook (FastAPI) ===
@app.post("/")
async def telegram_webhook(req: Request):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ Telegram.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –∏—Ö –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É aiogram.
    """
    try:
        body = await req.body()
        update = types.Update.model_validate_json(body)
        await dp.feed_update(bot, update)
        return {"ok": True}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return {"ok": False, "error": str(e)}, 500

# === –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ polling –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ ===
# –≠—Ç–æ—Ç –±–ª–æ–∫ –∫–æ–¥–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—É—Å–∫–µ —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, python main.py)
# –∏ –Ω–µ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ FastAPI/webhook.
if __name__ == "__main__":
    init_db() # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    
    async def main():
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling."""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
        await setup_bot_commands() # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        await dp.start_polling(bot) # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é main
    asyncio.run(main())
